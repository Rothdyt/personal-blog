<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tree and Graph | Dai, Yutong/ 戴宇童</title>
    <link>/resources/dsal/tree/</link>
      <atom:link href="/resources/dsal/tree/index.xml" rel="self" type="application/rss+xml" />
    <description>Tree and Graph</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2021</copyright><lastBuildDate>Sat, 05 Dec 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Tree and Graph</title>
      <link>/resources/dsal/tree/</link>
    </image>
    
    <item>
      <title>Basics of tree data structure and algorithms</title>
      <link>/resources/dsal/tree/tree_basic/</link>
      <pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/resources/dsal/tree/tree_basic/</guid>
      <description>&lt;h1 id=&#34;traverse-algorithms&#34;&gt;Traverse Algorithms&lt;/h1&gt;
&lt;h2 id=&#34;pre-order&#34;&gt;Pre-order&lt;/h2&gt;
&lt;p&gt;The pre-order traversal visit nodes in &lt;code&gt;root - left - right&lt;/code&gt; order, where the the root appears in the first.&lt;/p&gt;
&lt;h3 id=&#34;recursion-implementation&#34;&gt;recursion implementation&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#93a1a1;font-style:italic&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#93a1a1;font-style:italic&#34;&gt;# class TreeNode(object):&lt;/span&gt;
&lt;span style=&#34;color:#93a1a1;font-style:italic&#34;&gt;#     def __init__(self, val=0, left=None, right=None):&lt;/span&gt;
&lt;span style=&#34;color:#93a1a1;font-style:italic&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#93a1a1;font-style:italic&#34;&gt;#         self.left = left&lt;/span&gt;
&lt;span style=&#34;color:#93a1a1;font-style:italic&#34;&gt;#         self.right = right&lt;/span&gt;

&lt;span style=&#34;color:#859900&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;Solution&lt;/span&gt;(&lt;span style=&#34;color:#cb4b16&#34;&gt;object&lt;/span&gt;):
    &lt;span style=&#34;color:#859900&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;preorderTraversal&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;, &lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt;):
        &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;        :type root: TreeNode
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;        :rtype: List[int]
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;ans&lt;/span&gt; = []
        &lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;dfs&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt;)
        &lt;span style=&#34;color:#859900&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;ans&lt;/span&gt;
    &lt;span style=&#34;color:#859900&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;dfs&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;, &lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;):
        &lt;span style=&#34;color:#859900&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#859900&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;: &lt;span style=&#34;color:#859900&#34;&gt;return&lt;/span&gt;
        &lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;ans&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;append&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;val&lt;/span&gt;)
        &lt;span style=&#34;color:#859900&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;left&lt;/span&gt;: &lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;dfs&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;left&lt;/span&gt;)
        &lt;span style=&#34;color:#859900&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;right&lt;/span&gt;: &lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;dfs&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;right&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;iterative-implementation&#34;&gt;iterative implementation&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#93a1a1;font-style:italic&#34;&gt;# iterative&lt;/span&gt;
&lt;span style=&#34;color:#93a1a1;font-style:italic&#34;&gt;# hint: using stack and add children using right-left order.&lt;/span&gt;
&lt;span style=&#34;color:#dc322f;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#dc322f;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;deque&lt;/span&gt;
&lt;span style=&#34;color:#859900&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;Solution&lt;/span&gt;(&lt;span style=&#34;color:#cb4b16&#34;&gt;object&lt;/span&gt;):
    &lt;span style=&#34;color:#859900&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;preorderTraversal&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;, &lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt;):
        &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;        :type root: TreeNode
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;        :rtype: List[int]
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#859900&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#859900&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt;:
            &lt;span style=&#34;color:#859900&#34;&gt;return&lt;/span&gt; []
        &lt;span style=&#34;color:#268bd2&#34;&gt;stack&lt;/span&gt; = &lt;span style=&#34;color:#268bd2&#34;&gt;deque&lt;/span&gt;()
        &lt;span style=&#34;color:#268bd2&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;appendleft&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt;)
        &lt;span style=&#34;color:#268bd2&#34;&gt;ans&lt;/span&gt; = []
        &lt;span style=&#34;color:#859900&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;stack&lt;/span&gt;:
            &lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt; = &lt;span style=&#34;color:#268bd2&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;popleft&lt;/span&gt;()
            &lt;span style=&#34;color:#268bd2&#34;&gt;ans&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;append&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;val&lt;/span&gt;)
            &lt;span style=&#34;color:#859900&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;right&lt;/span&gt;: &lt;span style=&#34;color:#268bd2&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;appendleft&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;right&lt;/span&gt;)
            &lt;span style=&#34;color:#859900&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;left&lt;/span&gt;: &lt;span style=&#34;color:#268bd2&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;appendleft&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;left&lt;/span&gt;)
        &lt;span style=&#34;color:#859900&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;ans&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;in-order&#34;&gt;In-order&lt;/h2&gt;
&lt;p&gt;The in-order traversal visit nodes in &lt;code&gt;left-root-right&lt;/code&gt; order, where the the root appears in the middle.
recursion implementation&lt;/p&gt;
&lt;h3 id=&#34;recursion&#34;&gt;Recursion&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#859900&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;Solution&lt;/span&gt;(&lt;span style=&#34;color:#cb4b16&#34;&gt;object&lt;/span&gt;):
    &lt;span style=&#34;color:#859900&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;inorderTraversal&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;, &lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt;):
        &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;        :type root: TreeNode
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;        :rtype: List[int]
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;ans&lt;/span&gt; = []
        &lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;dfs&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt;)
        &lt;span style=&#34;color:#859900&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;ans&lt;/span&gt;
    &lt;span style=&#34;color:#859900&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;dfs&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;, &lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;):
        &lt;span style=&#34;color:#859900&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#859900&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;: &lt;span style=&#34;color:#859900&#34;&gt;return&lt;/span&gt;
        &lt;span style=&#34;color:#859900&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;left&lt;/span&gt;: &lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;dfs&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;left&lt;/span&gt;)
        &lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;ans&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;append&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;val&lt;/span&gt;)
        &lt;span style=&#34;color:#859900&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;right&lt;/span&gt;: &lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;dfs&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;right&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;iterative-implementation-1&#34;&gt;iterative implementation&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#dc322f;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#dc322f;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;deque&lt;/span&gt;        
&lt;span style=&#34;color:#859900&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;Solution&lt;/span&gt;(&lt;span style=&#34;color:#cb4b16&#34;&gt;object&lt;/span&gt;):
    &lt;span style=&#34;color:#859900&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;inorderTraversal&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;, &lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt;):
        &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;        :type root: TreeNode
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;        :rtype: List[int]
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#859900&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#859900&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt;:
            &lt;span style=&#34;color:#859900&#34;&gt;return&lt;/span&gt; []
        &lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;stack&lt;/span&gt; = &lt;span style=&#34;color:#268bd2&#34;&gt;deque&lt;/span&gt;()
        &lt;span style=&#34;color:#268bd2&#34;&gt;ans&lt;/span&gt; = []
        &lt;span style=&#34;color:#859900&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#859900&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;stack&lt;/span&gt;:            &lt;span style=&#34;color:#93a1a1;font-style:italic&#34;&gt;# need add root here&lt;/span&gt;
            &lt;span style=&#34;color:#859900&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt;:
                &lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;appendleft&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt;)
                &lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt; = &lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;left&lt;/span&gt;
            &lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt; = &lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;popleft&lt;/span&gt;()
            &lt;span style=&#34;color:#268bd2&#34;&gt;ans&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;append&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;val&lt;/span&gt;)
            &lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt; = &lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;right&lt;/span&gt;
        &lt;span style=&#34;color:#859900&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;ans&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;discussion: why the following code is wrong?&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#dc322f;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#dc322f;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;deque&lt;/span&gt;        
&lt;span style=&#34;color:#859900&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;Solution&lt;/span&gt;(&lt;span style=&#34;color:#cb4b16&#34;&gt;object&lt;/span&gt;):
    &lt;span style=&#34;color:#859900&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;inorderTraversal&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;, &lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt;):
        &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;        :type root: TreeNode
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;        :rtype: List[int]
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#859900&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#859900&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt;:
            &lt;span style=&#34;color:#859900&#34;&gt;return&lt;/span&gt; []
        &lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;stack&lt;/span&gt; = &lt;span style=&#34;color:#268bd2&#34;&gt;deque&lt;/span&gt;()
        &lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;appendleft&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt;)
        &lt;span style=&#34;color:#268bd2&#34;&gt;ans&lt;/span&gt; = []
        &lt;span style=&#34;color:#859900&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#859900&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;stack&lt;/span&gt;:
            &lt;span style=&#34;color:#859900&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt;:
                &lt;span style=&#34;color:#859900&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;left&lt;/span&gt;: &lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;appendleft&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;left&lt;/span&gt;)
                &lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt; = &lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;left&lt;/span&gt;
            &lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt; = &lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;popleft&lt;/span&gt;()
            &lt;span style=&#34;color:#268bd2&#34;&gt;ans&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;append&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;val&lt;/span&gt;)
            &lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt; = &lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;right&lt;/span&gt;
        &lt;span style=&#34;color:#859900&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;ans&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;pre&gt;&lt;code&gt;Hint: following edge cases would fail.
   1
    \
     2
    /
   3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When the node &lt;code&gt;1&lt;/code&gt; is poped out of the stack. The stack is empty. But we still need to  explore its right child.&lt;/p&gt;
&lt;h2 id=&#34;post-order&#34;&gt;Post-order&lt;/h2&gt;
&lt;p&gt;The post-order traversal visit nodes in &lt;code&gt;left-right-root&lt;/code&gt; order, where the the root appears in the last.&lt;/p&gt;
&lt;h3 id=&#34;recursion-implementation-1&#34;&gt;recursion implementation&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#859900&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;Solution&lt;/span&gt;(&lt;span style=&#34;color:#cb4b16&#34;&gt;object&lt;/span&gt;):
    &lt;span style=&#34;color:#859900&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;postorderTraversal&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;, &lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt;):
        &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;        :type root: TreeNode
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;        :rtype: List[int]
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;ans&lt;/span&gt; = []
        &lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;dfs&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt;)
        &lt;span style=&#34;color:#859900&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;ans&lt;/span&gt;
    &lt;span style=&#34;color:#859900&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;dfs&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;, &lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;):
        &lt;span style=&#34;color:#859900&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#859900&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;:
            &lt;span style=&#34;color:#859900&#34;&gt;return&lt;/span&gt; []
        &lt;span style=&#34;color:#859900&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;left&lt;/span&gt;: &lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;dfs&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;left&lt;/span&gt;)
        &lt;span style=&#34;color:#859900&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;right&lt;/span&gt;: &lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;dfs&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;right&lt;/span&gt;)
        &lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;ans&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;append&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;val&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;iterative-implementation-2&#34;&gt;iterative implementation&lt;/h3&gt;
&lt;p&gt;The idea is to hack the pre-order traversal, which visit nodes in &lt;code&gt;root-left-right&lt;/code&gt; order. If we visit in the &lt;code&gt;root-right-left&lt;/code&gt; order and reverse it, then we get &lt;code&gt;left-right-root&lt;/code&gt; order.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#dc322f;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#dc322f;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;deque&lt;/span&gt;
&lt;span style=&#34;color:#859900&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;Solution&lt;/span&gt;(&lt;span style=&#34;color:#cb4b16&#34;&gt;object&lt;/span&gt;):
    &lt;span style=&#34;color:#859900&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;postorderTraversal&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;, &lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt;):
        &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;        :type root: TreeNode
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;        :rtype: List[int]
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#859900&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#859900&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt;:
            &lt;span style=&#34;color:#859900&#34;&gt;return&lt;/span&gt; []
        &lt;span style=&#34;color:#268bd2&#34;&gt;ans&lt;/span&gt; = []
        &lt;span style=&#34;color:#268bd2&#34;&gt;stack&lt;/span&gt; = &lt;span style=&#34;color:#268bd2&#34;&gt;deque&lt;/span&gt;()
        &lt;span style=&#34;color:#268bd2&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;appendleft&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt;)
        &lt;span style=&#34;color:#859900&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;stack&lt;/span&gt;:
            &lt;span style=&#34;color:#93a1a1;font-style:italic&#34;&gt;# root-right-left order&lt;/span&gt;
            &lt;span style=&#34;color:#93a1a1;font-style:italic&#34;&gt;# reverse it; left-right-root&lt;/span&gt;
            &lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt; = &lt;span style=&#34;color:#268bd2&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;popleft&lt;/span&gt;()
            &lt;span style=&#34;color:#268bd2&#34;&gt;ans&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;append&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;val&lt;/span&gt;)
            &lt;span style=&#34;color:#859900&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;left&lt;/span&gt;: &lt;span style=&#34;color:#268bd2&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;appendleft&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;left&lt;/span&gt;)
            &lt;span style=&#34;color:#859900&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;right&lt;/span&gt;: &lt;span style=&#34;color:#268bd2&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;appendleft&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;right&lt;/span&gt;)
        &lt;span style=&#34;color:#859900&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;ans&lt;/span&gt;[::-&lt;span style=&#34;color:#2aa198;font-weight:bold&#34;&gt;1&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;summary-templates&#34;&gt;Summary: templates&lt;/h2&gt;
&lt;h3 id=&#34;recursion-1&#34;&gt;recursion&lt;/h3&gt;
&lt;h3 id=&#34;iterative&#34;&gt;iterative&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://leetcode-solution-leetcode-pp.gitbook.io/leetcode-solution/thinkings/binary-tree-traversal#shuang-se-biao-ji-fa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Reference&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;level-order&#34;&gt;Level-order&lt;/h2&gt;
&lt;p&gt;From left to right from  root to leaf.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#dc322f;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#dc322f;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;deque&lt;/span&gt;
&lt;span style=&#34;color:#859900&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;Solution&lt;/span&gt;(&lt;span style=&#34;color:#cb4b16&#34;&gt;object&lt;/span&gt;):
    &lt;span style=&#34;color:#859900&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;levelOrder&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;, &lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt;):
        &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;        :type root: TreeNode
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;        :rtype: List[List[int]]
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#859900&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#859900&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt;:
            &lt;span style=&#34;color:#859900&#34;&gt;return&lt;/span&gt; []
        &lt;span style=&#34;color:#268bd2&#34;&gt;queue&lt;/span&gt; = &lt;span style=&#34;color:#268bd2&#34;&gt;deque&lt;/span&gt;()
        &lt;span style=&#34;color:#268bd2&#34;&gt;ans&lt;/span&gt; = []
        &lt;span style=&#34;color:#268bd2&#34;&gt;queue&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;append&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt;)
        &lt;span style=&#34;color:#859900&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;queue&lt;/span&gt;:
            &lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt; = &lt;span style=&#34;color:#268bd2&#34;&gt;queue&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;popleft&lt;/span&gt;()
            &lt;span style=&#34;color:#268bd2&#34;&gt;ans&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;append&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;val&lt;/span&gt;)
            &lt;span style=&#34;color:#859900&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;left&lt;/span&gt;: &lt;span style=&#34;color:#268bd2&#34;&gt;queue&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;append&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;left&lt;/span&gt;)
            &lt;span style=&#34;color:#859900&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;right&lt;/span&gt;: &lt;span style=&#34;color:#268bd2&#34;&gt;queue&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;append&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;right&lt;/span&gt;)
        &lt;span style=&#34;color:#859900&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;ans&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;variant-level-aware-method&#34;&gt;Variant: level aware method&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://leetcode-cn.com/problems/binary-tree-level-order-traversal/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Leet-code: 102&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。

 

示例：
二叉树：[3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回其层次遍历结果：

[
  [3],
  [9,20],
  [15,7]
]


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/binary-tree-level-order-traversal
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The key is to create a variable to record number of nodes in current level.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#dc322f;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#dc322f;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;deque&lt;/span&gt;
&lt;span style=&#34;color:#859900&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;Solution&lt;/span&gt;(&lt;span style=&#34;color:#cb4b16&#34;&gt;object&lt;/span&gt;):
    &lt;span style=&#34;color:#859900&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;levelOrder&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;, &lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt;):
        &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;        :type root: TreeNode
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;        :rtype: List[List[int]]
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#859900&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#859900&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt;:
            &lt;span style=&#34;color:#859900&#34;&gt;return&lt;/span&gt; []
        &lt;span style=&#34;color:#268bd2&#34;&gt;queue&lt;/span&gt; = &lt;span style=&#34;color:#268bd2&#34;&gt;deque&lt;/span&gt;()
        &lt;span style=&#34;color:#268bd2&#34;&gt;ans&lt;/span&gt; = []
        &lt;span style=&#34;color:#268bd2&#34;&gt;queue&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;append&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;root&lt;/span&gt;)
        &lt;span style=&#34;color:#859900&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;queue&lt;/span&gt;:
            &lt;span style=&#34;color:#268bd2&#34;&gt;temp&lt;/span&gt; = []
            &lt;span style=&#34;color:#268bd2&#34;&gt;num_nodes_in_current_level&lt;/span&gt; = &lt;span style=&#34;color:#cb4b16&#34;&gt;len&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;queue&lt;/span&gt;)
            &lt;span style=&#34;color:#859900&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;num_nodes_in_current_level&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#2aa198;font-weight:bold&#34;&gt;0&lt;/span&gt;:
                &lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt; = &lt;span style=&#34;color:#268bd2&#34;&gt;queue&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;popleft&lt;/span&gt;()
                &lt;span style=&#34;color:#268bd2&#34;&gt;temp&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;append&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;val&lt;/span&gt;)
                &lt;span style=&#34;color:#859900&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;left&lt;/span&gt;: &lt;span style=&#34;color:#268bd2&#34;&gt;queue&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;append&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;left&lt;/span&gt;)
                &lt;span style=&#34;color:#859900&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;right&lt;/span&gt;: &lt;span style=&#34;color:#268bd2&#34;&gt;queue&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;append&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;right&lt;/span&gt;)
                &lt;span style=&#34;color:#268bd2&#34;&gt;num_nodes_in_current_level&lt;/span&gt; -= &lt;span style=&#34;color:#2aa198;font-weight:bold&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#93a1a1;font-style:italic&#34;&gt;# when reach this line, nodes in current level has been all explored&lt;/span&gt;
            &lt;span style=&#34;color:#268bd2&#34;&gt;ans&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;append&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;temp&lt;/span&gt;)
        &lt;span style=&#34;color:#859900&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;ans&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
